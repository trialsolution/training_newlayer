Export subsidy calibration
==========================

The export subsidy calibration applies a heuristic rule to find the appropriate slope and correction parameters:
>"If market price is increased by 20% of PADM then the value of subsidized export drops at 20% of the initial level"

 EQUATION ExpS2_  "Only 20 % of initial use of subsidised export limits if initial market price increases by 20 % of administrative price";
*
 EXPs2_(RM,XX) $ ( (DATA(RM,"FEOE_max",XX,"CUR") gt eps) AND DATA(RM,"PADM",XX,"CUR")) ..
*
*
            0.20 * v_valSubsExports(RM,XX) / DATA(RM,"FEOE_max",XX,"CUR") =E=
*
            Sigmoid(pv_sigmParSubsExports(RM,"EXPS",XX)/DATA(RM,"PADM",XX,"CUR")
                                           * ( DATA(RM,"PADM",XX,"CUR")
                                             -  pv_bevFuncSubsExpCorrFact(RM,XX)
*pw         NOTE1: v_marketPrice may be < PADM or > PADM in BAS=CUR => Take v_marketPrice rather than PADM (as in old version)
*                  as a reference point and assume that an increase of v_marketPrice equal to 0.2*PADM makes the EU so happy
*                  to reduce the use of export subsidies to 20% of initial value => gives more reasonable behaviour across products
*           NOTE2: For sugar PADM was 630 in BAS but 404 post reform => 20% increase of BAS would be a lot => reduce to 10%
                                              *(v_marketPrice(RM,XX)+(0.2- 0.1 $ SAMEAS(XX,"SUGA"))* DATA(RM,"PADM",XX,"CUR"))));   
                                              
                                              
TRQ function calibration
========================

Variable tariffs under bilateral quotas are defined vaguely by:

tariff = Pref + (MFN - Pref) * v_trqSigmoidFunc

The last term is defined by the sigmoid function:

 trqSigmoidFunc_(RM,RM1,XXX) $

             (
               ( (p_trqBilat(RM,RM1,XXX,"TrqNT","CUR") GT eps) $ (p_trqBilat(RM,RM1,XXX,"TrqNT","CUR") NE 1.E+10))
                           $ (p_trqBilat(RM,RM1,XXX,"TrqNT","CUR") NE prohibitive) $ p_tradeFlows(RM,RM1,XXX,"CUR")) ..


         v_trqSigmoidFunc(RM,RM1,XXX) =E= Sigmoid(p_trqSigmoidSlope(RM,XXX)/p_trqBilat(RM,RM1,XXX,"TrqNT","CUR")
                                                   * (v_tradeFlows(RM,RM1,XXX)-p_trqBilat(RM,RM1,XXX,"TrqNT","CUR")*0.97));     
                                                   
Two remarks:
1. It only applies to bilateral trq's
2. The 0.97 multiplier ensures that if imports are at the quota then an almost MFN rate is applied (otherwise it would be Pref + .5 * (MFN - Pref)

Tariffs under multilateral trq's are defined by the equations tarSpecW_ and tarAdvalW_ and stored under v_tarSpec(RM,"RW",XX) and v_tarAdval(RM,"RW",XX). The mechanism is the same as we apply for bilateral trq's, i.e. sigmoid function representation.

 tarSpecW_(RM,"Rw",XXX) $ (        (p_trqGlobl(RM,XXX,"TrqNt","CUR")   gt eps)
                           $   (   (p_trqGlobl(RM,XXX,"TsPref","CUR")  gt eps)
                                or (p_trqGlobl(RM,XXX,"TsMFN","CUR")   gt eps)) ) ..
*
        v_tarSpec(RM,"RW",XXX)/(p_trqGlobl(RM,XXX,"TsMFN","CUR")+p_trqGlobl(RM,XXX,"TsPref","CUR")) =E=

          ( p_trqGlobl(RM,XXX,"TsPref","CUR")
            + (   p_trqGlobl(RM,XXX,"TsMFN","CUR")
                 -p_trqGlobl(RM,XXX,"TsPref","CUR"))

               * sigmoid( p_trqSigmoidSlope(RM,XXX)/p_trqGlobl(RM,XXX,"TrqNT","CUR")
                        * (v_TRQImports(RM,XXX)- p_trqGlobl(RM,XXX,"TrqNT","CUR")*0.97)))
                        /(p_trqGlobl(RM,XXX,"TsMFN","CUR")+p_trqGlobl(RM,XXX,"TsPref","CUR"));  
                        
                        
Note that the equation contains the variable v_TRQImports, which is the sum of imports minus the bilateral trq's (=> bilateral trade flows are fille up first!)                       

*
* --- Sum of imports under a non allocated TRQ
*
 TRQImports_(RM,XXX) $ ( p_trqGlobl(RM,XXX,"TrqNT","Cur") gt eps) ..

    v_TRQImports(RM,XXX)/(p_trqGlobl(RM,XXX,"TrqNT","Cur")+1)
        =E=  SUM(RM1 $ (     (NOT p_doubleZero(RM,RM1,XXX,"CUR"))
                         $ (NOT SAMEAS(RM,RM1))
                         $ p_tradeFlows(RM,RM1,XXX,"CUR")
                         $ (NOT p_trqBilat(RM,RM1,XXX,"TrqNt","CUR") eq prohibitive)),

*
*         --- trade flows in case there is not bi-lateral TRQ
*
              v_tradeFlows(RM,RM1,XXX)
               $ ( (p_trqBilat(RM,RM1,XXX,"TrqNt","CUR") le eps) $ p_tradeFlows(RM,RM1,XXX,"CUR"))
*
*         --- overfill of bilateral imports: trade flows exceeding the bilateral quota
*
          + (-ncpcm(-(v_tradeFlows(RM,RM1,XXX)-p_trqBilat(RM,RM1,XXX,"TrqNt","CUR")),
                                          0,1.E-3*p_trqBilat(RM,RM1,XXX,"TrqNt","CUR")))
               $ (p_trqBilat(RM,RM1,XXX,"TrqNt","CUR") gt eps)
                                                              )/(p_trqGlobl(RM,XXX,"TrqNT","Cur")+1);

Remarks:
- 'ncpcm' is a smooth approximation of the min function: ncpcm(x,y,z) = x - z*ln(1+exp((x-y)/z)

Entry price system
------------------

Note that the entry price system is part of the TRQ trimming model m_fitTrq

> MODEL m_fitTrq / trqSigmoidFunc_,TarAdVal_,TarSpec_,TarSpecW_,TarAdValW_,FlipFlop_,tarSpecIfEntryPrice_,EntryPriceDriver_,TrqImports_/; 


                                                   
Public intervention
-------------------

CAPRI calculates and endogenous change in intervention stocks, based on intervention buy-ins and releases.

> INTS (stock change) = INTP (purchases) + INTD (releases)

Both the calculation of purchases and releases assume a probability distribution behind market prices. Based on that the probability of market prices undercutting the administrative prices is taken into account.
The assumed distribution is normal, which has the conveninet property that it can be fully described with the mean and the standard deviation.
Intervention buy-ins are calculated:

> Buyin = intMax * errorf[ (PADM - P_market + calib.param) / SD]

where SD is the standard deviation of market prices, estimated based on historical time series. PADM is the administrative price. 'errorf' is a GAMS function which coincides with the cumulative distribution function of the standard normal distribution.

Releases, on the other hand, depend on the probability of market prices undercutting the unit value exports:

> INTD = (STKS + INTP) * [1 - errorf[ (UVAE - P_market + calib.param) / SD]]

where STKS is the stock level at the initial point and UVAE denotes unit value exports. 

### Additional elements with the new market layer

With the new market layer the above calculation of intervention stocks happens at the level of policy blocks.
Therefore, the the calculated quantities need to be broken down to the level of single market model regions.
The implementation in CAPRI calculates the release and buy-in shares depending on relative market prices.

Equations: 

 - Release/Buy-in shares (non-numeraire market model regions): buyingShares_, releaseShares_
 - Accounting equations (quantities at RMTP = sum of quantities at RM): buyingRM_, buyingRMNum_, releaseRM, releaseRMNum_


                                                   